#Following instructions (as of 2020-04-01): https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
#Kaniko docs are here: https://github.com/GoogleContainerTools/kaniko
#While this example shows building to multiple registries for all branches, with a few modifications
#  it can be used to build non-master branches to a "dev" container registry and only build master to 
#  a production container registry
image: 
  name: gcr.io/kaniko-project/executor:debug-0fe0a64113fb9755f6896a805f67dbfdb02acf0d
  entrypoint: [""]

variables: 
  VERSIONLABELMETHOD: "OnlyIfThisCommitHasVersion" # options: "OnlyIfThisCommitHasVersion","LastVersionTagInGit"
  IMAGE_LABELS: >
    --label org.opencontainers.image.vendor=$GITLAB_USER_NAME
    --label org.opencontainers.image.authors=$GITLAB_USER_NAME
    --label org.opencontainers.image.revision=$CI_COMMIT_SHA
    --label org.opencontainers.image.source=$CI_PROJECT_URL
    --label org.opencontainers.image.documentation=$CI_PROJECT_URL
    --label org.opencontainers.image.licenses=$CI_PROJECT_URL
    --label org.opencontainers.image.url=$CI_PROJECT_URL
    --label vcs-url=$CI_PROJECT_URL
    --label com.gitlab.ci.user=$GITLAB_USER_NAME
    --label com.gitlab.ci.email=$GITLAB_USER_EMAIL
    --label com.gitlab.ci.tagorbranch=$CI_COMMIT_REF_NAME
    --label com.gitlab.ci.pipelineurl=$CI_PIPELINE_URL
    --label com.gitlab.ci.commiturl=$CI_PROJECT_URL/commit/$CI_COMMIT_SHA
    --label com.gitlab.ci.cijoburl=$CI_JOB_URL
    --label com.gitlab.ci.mrurl=$CI_PROJECT_URL/-/merge_requests/$CI_MERGE_REQUEST_ID

get-repo:
  stage: .pre
  image: 
    name: alpine/git
    entrypoint: [""]
  script:
    - |
      echo "Got clone and tar the kaniko repo because the docker image does not have git"
      git clone https://github.com/GoogleContainerTools/kaniko.git
      cd kaniko
      tar c --exclude .git -f ../kanikorepo.tar *
      cd ..
      ls -ashl
  artifacts:
    paths:
      - kanikorepo.tar

.sharedscript: &sharedscript
  script:
    - |
      SUBIMAGE="kaniko-on-$KANIKOFROMIMAGE"
      echo "Building and shipping image to $CI_REGISTRY_IMAGE/$SUBIMAGE"
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      
      tar xf kanikorepo.tar
      echo "splicing in FROM image, PATH and removing ENTRYPOINT"
      sed -i -e "s/FROM scratch/FROM $KANIKOFROMIMAGE/" deploy/Dockerfile
      echo "restoring full OS path"
      sed -i -e "s/ENV PATH \/usr\/local\/bin:\/kaniko/ENV PATH \/usr\/local\/sbin:\/usr\/local\/bin:\/usr\/sbin:\/usr\/bin:\/sbin:\/bin:\/kaniko/" deploy/Dockerfile    
      echo "Removing ENTRYPOINT"
      sed -i -e "s/ENTRYPOINT \[\"\/kaniko\/executor\"\]//" deploy/Dockerfile
      echo "Adding git to get latest version tag for tagging images"
      echo "RUN yum install -y git" >> deploy/Dockerfile
      echo "RUN dnf clean all; rm -rf /var/cache/yum" >> deploy/Dockerfile

      BUILDDATE="'$(date '+%FT%T%z' | sed -E -n 's/(\+[0-9]{2})([0-9]{2})$/\1:\2/p')'" #rfc 3339 date
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.created=$BUILDDATE --label build-date=$BUILDDATE"
      #Description for opencontainers
      BUILDTITLE=$(echo $CI_PROJECT_TITLE | tr " " "_")
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.title=$BUILDTITLE --label org.opencontainers.image.description=$BUILDTITLE"
      #Add ref.name for opencontainers
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.ref.name=$CI_REGISTRY_IMAGE/$SUBIMAGE:$CI_COMMIT_REF_NAME"

      #Build Version Label and Tag from git tag
      if [[ "$VERSIONLABELMETHOD" == "LastVersionTagInGit" ]]; then yum install -y git; VERSIONLABEL=$(git describe --abbrev=0 --tags); fi
      if [[ "$VERSIONLABELMETHOD" == "OnlyIfThisCommitHasVersion" ]]; then VERSIONLABEL=$CI_COMMIT_TAG; fi
      if [[ ! -z "$VERSIONLABEL" ]]; then 
        IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.version=$VERSIONLABEL"
        ADDITIONALTAGLIST="$ADDITIONALTAGLIST $VERSIONLABEL"
      fi
      
      ADDITIONALTAGLIST="$ADDITIONALTAGLIST $CI_COMMIT_REF_NAME $CI_COMMIT_SHORT_SHA"
      if [[ "$CI_COMMIT_REF_NAME" == "master" ]]; then ADDITIONALTAGLIST="$ADDITIONALTAGLIST latest"; fi
      if [[ -n "$ADDITIONALTAGLIST" ]]; then 
        for TAG in $ADDITIONALTAGLIST; do 
          #docker tag "$KANIKOFROMIMAGE" "$CI_REGISTRY_IMAGE/$SUBIMAGE:$TAG"; 
          FORMATTEDTAGLIST="${FORMATTEDTAGLIST} --tag $CI_REGISTRY_IMAGE/$SUBIMAGE:$TAG ";
        done; 
      fi

      echo $FORMATTEDTAGLIST
      echo $IMAGE_LABELS

      docker build $IMAGE_LABELS --pull $FORMATTEDTAGLIST -f deploy/Dockerfile .
      docker push "$CI_REGISTRY_IMAGE/$SUBIMAGE"
      echo "pull the image with the reference: $CI_REGISTRY_IMAGE/$SUBIMAGE"


build-for-gitlab-project-registry:
  stage: build
  environment:
    #This is only here for completeness, since there are no CI CD Variables with this scope, the project defaults are used
    # to push to this projects docker registry
    name: push-to-gitlab-project-registry
  <<: *sharedscript


build-for-docker-hub-registry:
  stage: build
  #This causes CI CD Variables to be taken from GitLab Project definition for variable scope "push-to-docker-hub", 
  # which overrides CI_REGISTRY, CI_REGISTRY_IMAGE, CI_REGISTRY_USER and CI_REGISTRY_PASSWORD
  # these variables with this scope would need to be created if you copy this project to another group or instance
  environment:
    name: push-to-docker-hub
  script:
    - |   
      echo "Building and shipping image to $CI_REGISTRY_IMAGE"
      if [[ "$CI_COMMIT_REF_NAME" == "master" ]]; then ADDLATESTTAG="--destination $CI_REGISTRY_IMAGE:latest"; fi
      if [[ -n "$ADDITIONALTAGLIST" ]]; then 
        for TAG in $ADDITIONALTAGLIST; do 
          FORMATTEDTAGLIST=" ${FORMATTEDTAGLIST} --destination $CI_REGISTRY_IMAGE:$TAG"
        done
      fi
      mkdir -p /kaniko/.docker
      echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
      /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $ADDLATESTTAG $FORMATTEDTAGLIST --label build-date=$(date -Iseconds) $IMAGE_LABELS
